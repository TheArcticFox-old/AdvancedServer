#ifndef PACKET_H
#define PACKET_H
#include <Log.h>
#include <enet/enet.h>
#include <stdint.h>

typedef enum
{
	IDENTITY,
	SERVER_IDENTITY_RESPONSE,

	SERVER_PLAYER_JOINED,
	SERVER_PLAYER_LEFT,
	SERVER_PLAYER_FORCE_DISCONNECT,

	SERVER_WAITING_PLAYER_INFO,

	SERVER_LOBBY_READY_STATE,
	SERVER_LOBBY_EXE,
	SERVER_LOBBY_COUNTDOWN,
	SERVER_LOBBY_EXE_CHANGE,
	SERVER_LOBBY_CHARACTER_CHANGE,
	SERVER_LOBBY_CHARACTER_RESPONSE,
	SERVER_LOBBY_EXECHARACTER_RESPONSE,
	SERVER_LOBBY_GAME_START,
	SERVER_LOBBY_PLAYER,
	SERVER_LOBBY_EXE_CHANCE,
	SERVER_LOBBY_CORRECT,
	SERVER_LOBBY_CHOOSEVOTEKICK,
	SERVER_LOBBY_CHOOSEBAN,
	SERVER_LOBBY_CHOOSEKICK,
	SERVER_LOBBY_CHOOSEOP,
	SERVER_LOBBY_CHANGELOBBY,
	SERVER_CHAR_TIME_SYNC,

	SERVER_VOTE_MAPS,
	SERVER_VOTE_SET,
	SERVER_VOTE_TIME_SYNC,

	SERVER_GAME_PLAYERS_READY,
	SERVER_GAME_EXE_WINS,
	SERVER_GAME_SURVIVOR_WIN,
	SERVER_GAME_SPAWN_RING,
	SERVER_GAME_PLAYER_ESCAPED,
	SERVER_GAME_BACK_TO_LOBBY,
	SERVER_GAME_TIME_SYNC,
	SERVER_GAME_TIME_OVER,
	SERVER_GAME_PING,
	SERVER_PLAYER_DEATH_STATE,
	SERVER_GAME_DEATHTIMER_TICK,
	SERVER_GAME_DEATHTIMER_END,

	SERVER_REQUEST_INFO,
	SERVER_HEARTBEAT,
	SERVER_PONG,

	SERVER_FORCE_DAMAGE,
	SERVER_GAME_RING_READY,
	SERVER_PLAYER_BACKTRACK,

	// Entities
	SERVER_TPROJECTILE_STATE,
	SERVER_ETRACKER_STATE,
	SERVER_ERECTOR_BRING_SPAWN,
	SERVER_RMZSLIME_STATE,
	SERVER_RMZSLIME_RINGBONUS,
	SERVER_RMZSHARD_STATE,
	SERVER_LCEYE_STATE,
	SERVER_LCCHAIN_STATE,
	SERVER_NPCONTROLLER_STATE,
	SERVER_KAFMONITOR_STATE,
	SERVER_YCRSMOKE_STATE,
	SERVER_YCRSMOKE_READY,
	SERVER_MOVINGSPIKE_STATE,
	SERVER_RING_STATE,
	SERVER_RING_COLLECTED,
	SERVER_ACT9WALL_STATE,
	SERVER_NAPBALL_STATE,
	SERVER_NAPICE_STATE,
	SERVER_PFLIFT_STATE,
	SERVER_BRING_STATE,
	SERVER_BRING_COLLECTED,
	SERVER_VVLCOLUMN_STATE,
	SERVER_VVVASE_STATE,
	SERVER_GHZTHUNDER_STATE,
	SERVER_TCGOM_STATE,
	SERVER_EXELLERCLONE_STATE,
	SERVER_DTTAILSDOLL_STATE,
	SERVER_DTBALL_STATE,
	SERVER_DTASS_STATE,
	SERVER_HDDOOR_STATE,
	SERVER_WDLATERN_ACTIVATE,
	SERVER_FART_STATE,
	SERVER_MJLAVA_STATE,
	SERVER_MJJUDGER_STATE,
	SERVER_MJCRYSTAL_STATE,

	// Entity actions
	CLIENT_ETRACKER,
	CLIENT_ETRACKER_ACTIVATED,
	CLIENT_TPROJECTILE,
	CLIENT_TPROJECTILE_HIT,
	CLIENT_TPROJECTILE_STARTCHARGE,
	CLIENT_ERECTOR_BALLS,
	CLIENT_ERECTOR_BRING_SPAWN,
	CLIENT_EXELLER_SPAWN_CLONE,
	CLIENT_EXELLER_TELEPORT_CLONE,
	CLIENT_MERCOIN_BONUS,

	CLIENT_RMZSLIME_HIT,
	CLIENT_LCEYE_REQUEST_ACTIVATE,
	CLIENT_KAFMONITOR_ACTIVATE,
	CLIENT_RING_COLLECTED,
	CLIENT_RING_BROKE,
	CLIENT_BRING_COLLECTED,
	CLIENT_NAPICE_ACTIVATE,
	CLIENT_SPRING_USE,
	CLIENT_PFLIT_ACTIVATE,
	CLIENT_VVVASE_BREAK,
	CLIENT_RMZSHARD_COLLECT,
	CLIENT_RMZSHARD_LAND,
	CLIENT_DTASS_ACTIVATE,
	CLIENT_HDDOOR_TOGGLE,
	CLIENT_FART_PUSH,

	CLIENT_LOBBY_READY_STATE,
	CLIENT_REQUESTED_INFO,
	CLIENT_PLAYER_DATA,
	CLIENT_PLAYER_HURT,
	CLIENT_SOUND_EMIT,
	CLIENT_PING,

	CLIENT_REVIVAL_PROGRESS,
	CLIENT_PLAYER_HEAL,
	CLIENT_PLAYER_HEAL_PART,
	SERVER_REVIVAL_PROGRESS,
	SERVER_REVIVAL_STATUS,
	SERVER_REVIVAL_RINGSUB,
	SERVER_REVIVAL_REVIVED,

	CLIENT_REQUEST_CHARACTER,
	CLIENT_REQUEST_EXECHARACTER,
	CLIENT_VOTE_REQUEST,

	CLIENT_PLAYER_DEATH_STATE,
	CLIENT_PLAYER_ESCAPED,
	SERVER_PLAYER_ESCAPED,
	CLIENT_LOBBY_PLAYERS_REQUEST,
	CLIENT_CREAM_SPAWN_RINGS,
	CLIENT_SPAWN_EFFECT,
	CLIENT_CHAT_MESSAGE,
	CLIENT_LOBBY_CHOOSEVOTEKICK,
	CLIENT_LOBBY_CHOOSEBAN,
	CLIENT_LOBBY_CHOOSEKICK,
	CLIENT_LOBBY_CHOOSEOP,
	CLIENT_PLAYER_PALETTE,
	CLIENT_PET_PALETTE,

	SERVER_RESULTS,
	SERVER_RESULTS_DATA,
	CLIENT_RESULTS_REQUEST,
	CLIENT_STATS_REPORT,
	SERVER_PREIDENTITY,
	SERVER_FELLA,

	CLIENT_PLAYER_POTATER
} PacketType;

typedef struct
{
	#define PACKET_MAXSIZE 256

	uint8_t buff[PACKET_MAXSIZE];
	uint8_t pos;
	uint8_t len;
} Packet;

/* UTF-8 supporting string */
typedef struct
{
	char		value[250];
	uint16_t	len;
} String;

String string_new(const char* value);
size_t string_length(String* str);
String string_lower(String str);
#define __Str(x) string_new(x)

bool 	packet_new(Packet* packet, PacketType type);
Packet 	packet_from(ENetPacket* packet);

struct Server;
bool packet_send(ENetPeer* peer, Packet* packet, bool reliable);
bool packet_send_id(struct Server* server, uint16_t id, Packet* packet, bool reliable);
bool packet_seek(Packet* packet, int wh);

bool packet_read8(Packet* packet, uint8_t* out);
bool packet_read16(Packet* packet, uint16_t* out);
bool packet_read32(Packet* packet, uint32_t* out);
bool packet_read64(Packet* packet, uint64_t* out);
bool packet_readfloat(Packet* packet, float* out);
bool packet_readdouble(Packet* packet, double* out);
bool packet_readstr(Packet* packet, String* out);

bool packet_write8(Packet* packet, uint8_t value);
bool packet_write16(Packet* packet, uint16_t value);
bool packet_write32(Packet* packet, uint32_t value);
bool packet_write64(Packet* packet, uint64_t value);
bool packet_writefloat(Packet* packet, float value);
bool packet_writedouble(Packet* packet, double value);
bool packet_writestr(Packet* packet, String value);

#define PacketCreate(packet, type) RAssert(packet_new(packet, type))
#define PacketRead(outname, packet, func, type)\
type outname;\
RAssert(func(packet, (void*)&outname))
#define PacketWrite(packet, func, val) RAssert(func(packet, val))

#endif
